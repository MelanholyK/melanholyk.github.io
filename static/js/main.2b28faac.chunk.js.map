{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Transition","React","forwardRef","props","ref","react_default","a","createElement","Slide","Object","assign","direction","App","useEffect","lottie","loadAnimation","container","document","getElementById","renderer","loop","autoplay","path","_useState","useState","_useState2","slicedToArray","open","setOpen","handleClickOpen","handleClose","className","id","Grid","justify","item","alt","src","width","alignItems","IconButton","size","onClick","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b28faac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport lottie from 'lottie-web';\n\nimport './App.css';\n\n\nconst Transition = React.forwardRef((props, ref) => (\n  <Slide direction=\"up\" ref={ref} {...props} />\n));\n\nconst App = () => {\n  useEffect(() => {\n    lottie.loadAnimation({\n      container: document.getElementById('lottie'),\n      renderer: 'canvas',\n      loop: true,\n      autoplay: true,\n      path: 'cross.json'\n    })\n  });\n  const [open, setOpen] = useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n  \n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div id=\"lottie\">\n        </div>\n        <Grid container direction=\"column\" justify=\"space-between\">\n          <Grid container item direction=\"row\" justify=\"space-between\">\n            <Grid item >\n              <div className=\"title\">\n                <img alt=\"Logo\" src=\"logo.svg\" width=\"300\"/>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"profile\">\n                <Grid container alignItems=\"center\">\n                  <Grid item className=\"pupil\">\n                    <div className=\"name\">\n                      Святозар Игнатов\n                    </div>\n                    <div className=\"number\">\n                      1Б\n                    </div>\n                  </Grid>\n                  <Grid item>  \n                    <div className=\"title\">\n                      <IconButton size='small' onClick={handleClickOpen}>\n                        <img alt=\"Logo\" src=\"profile.svg\" width=\"60\"/>\n                      </IconButton>\n                    </div>\n                  </Grid>\n                </Grid>\n              </div>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"flex-end\" justify=\"space-between\">\n            <Grid item>\n              <div className=\"back\">\n                <IconButton onClick={handleClickOpen}>\n                  <img alt=\"Logo\" src=\"undo.svg\" width=\"60\"/>\n                </IconButton>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"school\">\n                <div>Государственное бюджетное</div>\n                <div>общеобразовательное учреждение</div>\n                <div>средняя шока №123</div>\n                <div>с углубленным изучением предметов</div>\n                <div>естественнонаучного цикла</div>\n                <div>Центрального района Санкт-Петербурга</div>\n              </div>\n            </Grid>\n          </Grid>  \n        </Grid>\n        <Dialog\n          open={open}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">{\"Профиль ученика\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              Профиль ученика 1Б Святозара Игнатова\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Закрыть\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>  \n    </div>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}