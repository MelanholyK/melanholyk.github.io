{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Transition","React","forwardRef","props","ref","react_default","a","createElement","Slide","Object","assign","direction","App","_useState","useState","opened","modal","_useState2","slicedToArray","open","setOpen","_useState3","_useState4","openQuestion","setOpenQuestion","closeModal","openQuestionModal","closeQuestion","useEffect","lottie","loadAnimation","container","document","getElementById","renderer","loop","autoplay","path","addEventListener","e","human","getElementsByClassName","i","length","onclick","j","classList","toggle","question","className","Grid","justify","item","id","alt","src","width","alignItems","IconButton","size","onClick","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79945c86.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport lottie from 'lottie-web';\n\nimport './App.css';\n\n\nconst Transition = React.forwardRef((props, ref) => (\n  <Slide direction=\"up\" ref={ref} {...props} />\n));\n\nconst App = () => {\n  const [open, setOpen] = useState({opened: false, modal: null});\n  const [openQuestion, setOpenQuestion] = useState(false);\n\n  useEffect(() => {\n    const anim = lottie.loadAnimation({\n      container: document.getElementById('lottie'),\n      renderer: 'svg',\n      loop: true,\n      autoplay: true,\n      path: 'cross.json'\n    });\n    anim.addEventListener('DOMLoaded', (e) => {\n      const human = document.getElementsByClassName('human-cross');\n      for (let i = 0; i < human.length; i++) {\n        human[i].onclick = () => {\n          for (let j = 0; j < human.length; j++) {\n            human[j].classList.toggle('human-red');\n          }\n        };\n      }\n      const question = document.getElementsByClassName('question');\n      for (let i = 0; i < question.length; i++) {\n        question[i].onclick = openQuestionModal;\n      }\n    });\n  }, []);\n  \n  function openProfileModal() {\n    setOpen({opened: true, modal: 'profile'});\n  }\n\n  function openCloseModal() {\n    setOpen({opened: true, modal: 'close'});\n  }\n\n  function closeModal() {\n    setOpen({opened: false, modal: null});\n  }\n\n  function openQuestionModal() {\n    setOpenQuestion(true);\n  }\n\n  function closeQuestion() {\n    setOpenQuestion(false);\n  }\n  \n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <Grid container justify=\"center\" className=\"lottie-wrapper\">\n          <Grid item>\n            <div id=\"lottie\">\n            </div>\n          </Grid>\n        </Grid>\n        <Grid container direction=\"column\" justify=\"space-between\">\n          <Grid container item direction=\"row\" justify=\"space-between\">\n            <Grid item >\n              <div className=\"title\">\n                <img alt=\"Logo\" src=\"logo.svg\" width=\"300\"/>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"profile\">\n                <Grid container alignItems=\"center\">\n                  <Grid item className=\"pupil\">\n                    <div className=\"name\">\n                      Святозар Игнатов\n                    </div>\n                    <div className=\"number\">\n                      1Б\n                    </div>\n                  </Grid>\n                  <Grid item>  \n                    <div className=\"title\">\n                      <IconButton size='small' onClick={openProfileModal}>\n                        <img alt=\"Logo\" src=\"profile.svg\" width=\"60\"/>\n                      </IconButton>\n                    </div>\n                  </Grid>\n                </Grid>\n              </div>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"flex-end\" justify=\"space-between\">\n            <Grid item>\n              <div className=\"back\">\n                <IconButton onClick={openCloseModal}>\n                  <img alt=\"Logo\" src=\"undo.svg\" width=\"60\"/>\n                </IconButton>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"school\">\n                <div>Государственное бюджетное</div>\n                <div>общеобразовательное учреждение</div>\n                <div>средняя шока №123</div>\n                <div>с углубленным изучением предметов</div>\n                <div>естественнонаучного цикла</div>\n                <div>Центрального района Санкт-Петербурга</div>\n              </div>\n            </Grid>\n          </Grid>  \n        </Grid>\n        <Dialog\n          open={open.opened}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={closeModal}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">{open.modal === 'profile' ? \"Профиль ученика\" : 'Вернуться на карту'}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              {open.modal === 'profile' ?\n                'Профиль ученика 1Б Святозара Игнатова' :\n                'Экзамен еще не закончен. Вы уверены что хотите завершить тестирование?'}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={closeModal} color=\"primary\">\n              {open.modal === 'profile' ? 'Выйти из профиля' : 'Завершить тестирование'}\n            </Button>\n            <Button onClick={closeModal} color=\"primary\">\n              Закрыть\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          open={openQuestion}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={closeQuestion}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">{'Вопрос'}</DialogTitle>\n          <DialogContent>\n            <img alt=\"Sign\" src=\"sign.svg\" width=\"200\"/>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={closeQuestion} color=\"primary\">\n              Закрыть\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>  \n    </div>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}